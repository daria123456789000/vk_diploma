sex_dict = {
    0: 'не указано',
    1: 'женский',
    2: 'мужской'
}

relations_dict = {
    0:
    {
        1: 'не женат / не замужем',
        2: 'есть друг / есть подруга',
        3: 'помолвлен / помолвлена',
        4: 'женат / замужем',
        5: 'всё сложно',
        6: 'в активном поиске',
        7: 'влюблён / влюблена',
        8: 'в гражданском браке',
        0: 'не указано'
    },
    1:
    {
        1: 'не замужем',
        2: 'есть друг',
        3: 'помолвлена',
        4: 'замужем',
        5: 'всё сложно',
        6: 'в активном поиске',
        7: 'влюблена',
        8: 'в гражданском браке',
        0: 'не указано'
    },
    2:
    {
        1: 'не женат',
        2: 'есть подруга',
        3: 'помолвлен',
        4: 'женат',
        5: 'всё сложно',
        6: 'в активном поиске',
        7: 'влюблён',
        8: 'в гражданском браке',
        0: 'не указано'
    }
}

parameters_dict = {
    1: 'год рождения',
    2: 'пол',
    3: 'город',
    4: 'статус отношений',
}

options_messages = {
    'check_search': 'Введите номер команды:\n1 - Добавить в избранные\n2 - Добавить в чёрный список\n3 - Пропустить\n4 - Завершить поиск\n',
    'enter_age': 'Введите свой возраст (Число от 18 до 99)\n',
    'enter_sex': 'Укажите свой пол\n1 - Женский\n2 - Мужской\n',
    'enter_city': 'Измените город в настройках профиля\n',
    'enter_relation': 'Укажите статус отношений\n1 - не женат / не замужем\n2 - есть друг / есть подруга\n3 - помолвлен / помолвлена\n4 - женат / замужем\n5 - всё сложно\n6 - в активном поиске\n7 - влюблён / влюблена\n8 - в гражданском браке\n0 - не указано\n',
    'start': '1 - Начать новый поиск пары\n2 - Показать избранное\n3 - Закончить работу\n',
    'users_end_search': 'Поиск завершен\n',
    'end_search_list': 'Поиск завершен\nВсе результаты просмотрены\n',
    'adding_attributes': '1 - Внести недостающую информацию в чате\n2 - Завершить поиск\n',
    'end_work': 'Работа с системой закончена\nДля старта работы введите - Начать\n',
}

import random
import requests
import time

import dictionaries_vk
import user_settings
import users_search
import data_base_users as db


class BotVK:
    def __init__(self, user_token, group_token):
self.user_token = user_token
self.group_token = group_token

def write_msg(self, user_id, message='empty message', attachment=''):
"""Функция отправки сообщения пользователю"""

info_resp = requests.get(
'https://api.vk.com/method/messages.send',
params={
    'random_id': random.randrange(10 ** 7),
    'access_token': self.group_token,
    'v': 5.131,
    'user_id': user_id,
    'message': message,
    'attachment': attachment,
}
)
return info_resp

def asking_question_get_answer_from_user(self, user_id=False, message='empty message',
q_message='empty question message', attachment='', answers_list=[]):
self.write_msg(user_id, message=message, attachment=attachment)
while True:
self.write_msg(user_id, message=q_message)
user_answer = self.checking_user_message(user_id=user_id)
if user_answer in answers_list:
return user_answer
self.write_msg(user_id, message='Неверная команда')

def get_info_from_user(self, user_id=False, message='empty message', answers_list=[]):
while True:
self.write_msg(user_id, message=message)
user_answer = self.checking_user_message(user_id=user_id)
if user_answer in answers_list:
return user_answer
self.write_msg(user_id, message='Неверная команда')

def get_conversations_with_users(self, token):
""" Функция для получения информации о беседах с пользователями """
info_resp = requests.get(
'https://api.vk.com/method/messages.getConversations',
params={
    'access_token': token,
    'v': 5.131,
}
)
return info_resp

def creating_user_class(self, user_id):
"""
        Метод создает экземпляр класса User, заполняет атрибуты класса из профиля пользователя,
        в случае отсутствия информации в профиле делает запрос через чат
        :param user_id:
        :return:
        """
current_user = user_settings.User(self.user_token, user_id)
message_user_info, empty_info_list = current_user.set_options_from_profile()
if len(empty_info_list) > 0:
answer = self.asking_question_get_answer_from_user(user_id=user_id, message=message_user_info,
q_message=dictionaries_vk.options_messages[
'adding_attributes'], answers_list=['1', '2'])
if answer == '2':
return False
else:
for parameter in empty_info_list:
while len(empty_info_list) > 0:
if parameter == 1:
age = self.get_info_from_user(user_id=user_id,
message=dictionaries_vk.options_messages['enter_age'],
answers_list=[str(x) for x in range(18, 100)])
current_user.age = int(age)
empty_info_list.remove(1)
elif parameter == 2:
sex = self.get_info_from_user(user_id=user_id,
message=dictionaries_vk.options_messages['enter_sex'],
answers_list=[str(x) for x in range(1, 3)])
current_user.sex = int(sex)
empty_info_list.remove(2)
elif parameter == 3:
self.write_msg(user_id=user_id,
message='Невозможно добавить город через чат\nДля корректной работы поиска укажите город проживания в профиле')
# city = self.get_info_from_user(user_id=user_id, message=dictionaries_vk.options_messages['enter_age'], answers_list=[x for x in range(18, 100)])
# возможна доработка с использованием списка городов в API через проверку названия города
elif parameter == 4:
relation = self.get_info_from_user(user_id=user_id,
message=dictionaries_vk.options_messages['enter_relation'],
answers_list=[str(x) for x in range(9)])
current_user.relation = int(relation)
empty_info_list.remove(4)
else:
self.write_msg(user_id=user_id, message=message_user_info)
return current_user

def searching_users(self, user_id, user_instance):
"""
        Метод поиска пары и добавления вариантов в БД
        :param user_id:
        :param user_instance:
        :return:
        """
new_users_search = users_search.UsersSearch(self.user_token, user_id, user_instance.age, user_instance.sex,
user_instance.city, user_instance.relation)
param_offset = 0
count = 1

while param_offset < count:
search_results = new_users_search.get_search_results(offset=param_offset, ).json()
count = search_results['response']['count']
param_offset += 1000
for user_number in search_results['response']['items']:
session = db.Session()
time.sleep(0.2)
photos_info = new_users_search.get_user_photos(user_number['id']).json()
if 'response' in photos_info.keys():
photos = new_users_search.get_best_photos(photos_info)
if not photos:
continue
try:
message_about_profile = f"{user_number['first_name']} {user_number['last_name']}\n{user_number['bdate']}\n{user_number['city']['title']}\nhttps://vk.com/{user_number['domain']}"
except KeyError:
print(f"KeyError in user_number(searching_users){user_number}")
continue
q_dating = session.query(db.DatingUser).filter(db.DatingUser.vk_id == user_number['id'],
db.BlackList.user_id == user_id)
q_black_list = session.query(db.BlackList).filter(db.BlackList.vk_id == user_number['id'],
db.BlackList.user_id == user_id)
if session.query(q_dating.exists()).scalar():
continue
if session.query(q_black_list.exists()).scalar():
continue
photos_attachment = ",".join(photos)
user_answer = self.asking_question_get_answer_from_user(user_id=user_id,
message=message_about_profile,
q_message=dictionaries_vk.options_messages[
'check_search'],
attachment=photos_attachment,
answers_list=['1', '2', '3', '4'])
if user_answer == '1':
dating_user = db.DatingUser(user_number['id'], user_number['first_name'],
user_number['last_name'], user_number['bdate'],
user_number['sex'], user_number['city'], photos_attachment,
user_number['domain'], user_id)
session.add(dating_user)
elif user_answer == '2':
black_list_item = db.BlackList(user_number['id'], user_number['first_name'],
user_number['last_name'], user_number['bdate'],
user_number['sex'], user_number['city'],
photos_attachment, user_number['domain'], user_id)
session.add(black_list_item)
elif user_answer == '3':
continue
elif user_answer == '4':
self.write_msg(user_id=user_id, message=dictionaries_vk.options_messages['users_end_search'])
return False
session.commit()
self.write_msg(user_id=user_id, message=dictionaries_vk.options_messages['end_search_list'])
return True

def checking_user_message(self, user_id=False):
"""
        Проверка сообщения от пользователя
        :return:
        """
if not user_id:
active_users = {}
while True:
current_conversations_json = self.get_conversations_with_users(self.group_token).json()
try:
for i in range(current_conversations_json['response']['count']):
if 'unread_count' in current_conversations_json['response']['items'][i]['conversation'].keys():
if current_conversations_json['response']['items'][i]['conversation']['unread_count'] >= 1:
user_message = current_conversations_json['response']['items'][i]['last_message']['text']
if str(user_message).lower() == 'начать':
user_id = current_conversations_json['response']['items'][i]['conversation']['peer'][
'id']
current_user = self.creating_user_class(user_id)
if not current_user:
continue
active_users[user_id] = current_user

if len(active_users) > 0:
print(active_users)
return active_users
except KeyError:
print(current_conversations_json)
else:
while True:
current_conversations_json = self.get_conversations_with_users(self.group_token).json()
try:
for i in range(current_conversations_json['response']['count']):
if current_conversations_json['response']['items'][i]['conversation']['peer']['id'] == user_id:
if 'unread_count' in current_conversations_json['response']['items'][i]['conversation'].keys():
if current_conversations_json['response']['items'][i]['conversation']['unread_count'] >= 1:
user_message = current_conversations_json['response']['items'][i]['last_message'][
'text']
return str(user_message).lower()
else:
continue
except KeyError:
print(current_conversations_json)

import datetime
import requests

import dictionaries_vk


class User:

    def __init__(self, user_token, user_id):
self.token = user_token
self.age = ''
self.sex = -1
self.city = {}
self.relation = -1
self.id = user_id
self.first_name = ''
self.last_name = ''

def get_profile_info(self):
""" Функция для получения информации искомого пользователя """
info_resp = requests.get(
'https://api.vk.com/method/users.get',
params={
    'user_ids': self.id,
    'access_token': self.token,
    'v': 5.131,
    'fields': 'relation, sex, bdate, city,'
}
)
return info_resp

def set_options_from_profile(self):
result_response = self.get_profile_info().json()
empty_info_list = []
try:
self.first_name = result_response['response'][0]['first_name']
except KeyError:
print('Отсутствует имя пользователя')
try:
self.last_name = result_response['response'][0]['last_name']
except KeyError:
print('Отсутствует фамилия пользователя')
try:
birth_date = result_response['response'][0]['bdate']
birth_date_list = [int(x) for x in birth_date.split('.')]
if len(birth_date_list) < 3:
raise
else:
current_date_list = [int(x) for x in str(datetime.date.today()).split('-')]
if current_date_list[1:2] >= birth_date_list[-2:-3]:
self.age = current_date_list[0] - birth_date_list[-1]
if self.age < 18:
raise ValueError
except ValueError:
empty_info_list.append("год рождения(Для использования сервиса необходим возраст 18+)")
except KeyError:
empty_info_list.append(1)
try:
self.sex = result_response['response'][0]['sex']
except KeyError:
empty_info_list.append(2)
try:
self.city = result_response['response'][0]['city']
except KeyError:
empty_info_list.append(3)
try:
self.relation = result_response['response'][0]['relation']
except KeyError:
empty_info_list.append(4)
empty_info_string_list = [dictionaries_vk.parameters_dict[x] for x in empty_info_list]
if len(empty_info_list) > 0:
message_user_info = f"Для корректной работы поиска необходимо заполнить следующие поля в вашем профиле:\n {', '.join(empty_info_string_list)}.\n"
else:
message_user_info = f"Информация вашего профиля:\nВозраст: {self.age}\nпол: {dictionaries_vk.sex_dict[self.sex]}\nгород: {self.city['title']}\nсемейное положение: {dictionaries_vk.relations_dict[self.sex][self.relation]}."
return message_user_info, empty_info_list

import requests


class UsersSearch:
    def __init__(self, user_token: str, user_id: int, age: int, sex: int, city: dict, relation: int):
self.token = user_token
self.age = age
self.sex = sex
self.city = city
self.relation = relation
self.user_id = user_id

def get_search_results(self, offset=0):
"""
        Метод формирует запрос на поиск пользователей, основываясь на параметрах профиля пользователя инициирующего поиск
        :param offset: сдвиг выборки
        :return: объект результат запроса
        """
params = self._calculating_search_parameters()
info_resp = requests.get(
'https://api.vk.com/method/users.search',
params={
    'access_token': self.token,
    'v': 5.131,
    'city_id': params['city_id'],
    'sex': params['sex'],
    'age_from': params['age_from'],
    'age_to': params['age_to'],
    'status': params['status'],
    'count': 1000,
    'offset': offset,
    'fields': 'domain, bdate, city, sex'
}
)
return info_resp

def _calculating_search_parameters(self):
"""
        Вычисление данных поиска на основе информации пользователя
        :return:
        """
if self.age == 18:
age_from = 18
else:
age_from = self.age - 1
age_to = self.age + 1
if self.sex == 1:
sex = 2
elif self.sex == 2:
sex = 1
else:
sex = self.sex
city_id = self.city['id']
status = self.relation
return {'age_from': age_from, 'age_to': age_to, 'sex': sex, 'city_id': city_id, 'status': status}

def get_best_photos(self, photos_info):
"""
        Метод возвращает 3 фотографии пользователя исходя из количества лайков и комментариев
        :param photos_info: результат запроса всех фото профиля пользователя в формате json
        :return: список с описанием 3 фото
        """
best_photos = []
for photo in photos_info['response']['items']:
name_photo = f"photo{photo['owner_id']}_{photo['id']}"
count_likes_and_comments = photo['likes']['count'] + photo['comments']['count']
best_photos.append((count_likes_and_comments, name_photo))
if len(best_photos) > 2:
best_photos.sort(reverse=True)
return [best_photos[0][1], best_photos[1][1], best_photos[2][1]]
else:
return False

def get_user_photos(self, owner_id):
"""
        Метод получения всех фото профиля пользователя
        :param owner_id: id пользователя, по которому запрашивается информация
        :return: объект ответа на запрос
        """
info_resp = requests.get(
'https://api.vk.com/method/photos.get',
params={
    'access_token': self.token,
    'v': 5.131,
    'album_id': 'profile',
    'extended': 1,
    'owner_id': owner_id,
}
)
return info_resp

from sqlalchemy import exc
import sqlalchemy as sa

import bot_vk
import private_token
import dictionaries_vk
import data_base_users as db

"""
Путь к токенам:
private_token.USER_TOKEN  - токен пользователя
private_token.GROUP_TOKEN - токен группы

Взаимодействие группы с пользователем в чате начинается после того как пользователь напишет в чате "Начать"


current_users = {} ввела на будущее, чтобы попробовать библиотеку asyncio, сейчас скрипт в один момент времени работает
только с одним пользователем
"""


def get_dating_users(user_id):
"""
    Функция получает список избранных профилей для выбранного пользователя
    :param user_id:
    :return:
    """
session = db.Session()
query = session.query(db.DatingUser).filter(sa.or_(
db.DatingUser.user_id == user_id)).all()
return query


def interaction_with_user(group_bot_vk, user, user_id):
"""
    Функция взаимодействия с пользователем
    :param group_bot_vk:
    :param user:
    :param user_id:
    :return:
    """
while True:
user_answer = group_bot_vk.get_info_from_user(user_id=user_id,
message=dictionaries_vk.options_messages['start'],
answers_list=['1', '2', '3'])
if user_answer == '1':
group_bot_vk.searching_users(user_id, user)
elif user_answer == '2':
query = get_dating_users(user_id)
group_bot_vk.write_msg(user_id=user_id, message=f"Число записей в избранном: {len(query)}")
for dating_profile in query:
message_about_profile = f"{dating_profile.dating_user_first_name} " \
f"{dating_profile.dating_user_last_name}\n{dating_profile.birthdate}" \
f"\n{dating_profile.city}\nhttps://vk.com/{dating_profile.user_domain}"
attachments_photo = dating_profile.best_photos
group_bot_vk.write_msg(user_id=user_id, message=message_about_profile, attachment=attachments_photo)
elif user_answer == '3':
group_bot_vk.write_msg(user_id=user_id, message=dictionaries_vk.options_messages['end_work'])
return False


def main():
"""
    Функция создает экземпляр бота
    :return:
    """
current_users = {}
group_bot_vk = bot_vk.BotVK(private_token.USER_TOKEN, private_token.GROUP_TOKEN)
while True:
writing_users = group_bot_vk.checking_user_message()
for user_id in writing_users.keys():
if user_id not in current_users.keys():
current_users[user_id] = True
user = writing_users[user_id]
vk_user = db.VKUser(user_id, user.first_name, user.last_name, user.age, user.sex, user.city)
session = db.Session()
session.add(vk_user)
try:
session.commit()
except exc.IntegrityError:
print('User already in BD')
current_users[user_id] = interaction_with_user(group_bot_vk, user, user_id)


if __name__ == '__main__':
main()

import sqlalchemy as sa
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

DATABASE_NAME = 'SearchResults.sqlite'

engine = create_engine(f'sqlite:///{DATABASE_NAME}')
Session = sessionmaker(bind=engine)

Base = declarative_base()


def create_db():
Base.metadata.create_all(engine)


def create_database():
create_db()


class VKUser(Base):
    __tablename__ = 'vk_user'
vk_id = sa.Column(sa.Integer, primary_key=True)
first_name = sa.Column(sa.String(80), nullable=False)
last_name = sa.Column(sa.String(80))
user_age = sa.Column(sa.Integer)
sex = sa.Column(sa.Integer)
city = sa.Column(sa.String(60))
city_id = sa.Column(sa.Integer)

def __init__(self, vk_id: int, first_name: str, last_name: str, user_age: int, sex: int, city: dict):
self.vk_id = vk_id
self.first_name = first_name
self.last_name = last_name
self.user_age = user_age
self.sex = sex
self.city = city['title']
self.city_id = city['id']


class DatingUser(Base):
    __tablename__ = 'dating_user'
vk_id = sa.Column(sa.Integer, primary_key=True)
dating_user_first_name = sa.Column(sa.String(80), nullable=False)
dating_user_last_name = sa.Column(sa.String(80))
birthdate = sa.Column(sa.String(30))
sex = sa.Column(sa.Integer)
city = sa.Column(sa.String(30))
city_id = sa.Column(sa.Integer)
best_photos = sa.Column(sa.String(100))
user_domain = sa.Column(sa.String(100))
user_id = sa.Column(sa.Integer, sa.ForeignKey('vk_user.vk_id'))

def __init__(self, vk_id: int, dating_user_first_name: str, dating_user_last_name: str, birthdate: str, sex: int,
city: dict, best_photos: str, user_domain: str, user_id: int):
self.vk_id = vk_id
self.dating_user_first_name = dating_user_first_name
self.dating_user_last_name = dating_user_last_name
self.birthdate = birthdate
self.sex = sex
self.city = city['title']
self.city_id = city['id']
self.best_photos = best_photos
self.user_domain = user_domain
self.user_id = user_id


class BlackList(Base):
    __tablename__ = 'blacklist'
vk_id = sa.Column(sa.Integer, primary_key=True)
black_list_user_first_name = sa.Column(sa.String(80), nullable=False)
black_list_user_last_name = sa.Column(sa.String(80))
birthdate = sa.Column(sa.String(30))
sex = sa.Column(sa.Integer)
city = sa.Column(sa.String(30))
city_id = sa.Column(sa.Integer)
best_photos = sa.Column(sa.String(100))
user_domain = sa.Column(sa.String(100))
user_id = sa.Column(sa.Integer, sa.ForeignKey('vk_user.vk_id'))

def __init__(self, vk_id: int, black_list_user_first_name: str, black_list_user_last_name: str, birthdate: str,
sex: int, city: dict, best_photos: str, user_domain: str, user_id: int):
self.vk_id = vk_id
self.black_list_user_first_name = black_list_user_first_name
self.black_list_user_last_name = black_list_user_last_name
self.birthdate = birthdate
self.sex = sex
self.city = city['title']
self.city_id = city['id']
self.best_photos = best_photos
self.user_domain = user_domain
self.user_id = user_id


Base.metadata.create_all(engine)

